export default async function handler(req, res) {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }
    
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }
    
    try {
        const { cardData, previewImage, cardId } = req.body;
        
        console.log('üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:', cardId);
        
        // üõ°Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•
        if (!cardId || !cardData) {
            return res.status(400).json({ 
                error: 'Missing required fields',
                required: ['cardId', 'cardData']
            });
        }
        
        // üé® –°–û–ó–î–ê–ù–ò–ï –ü–†–ï–í–¨–Æ URL
        const baseUrl = `https://${req.headers.host}`;
        const cardViewUrl = `https://cardgift-main-cardgift-web3-k32una0f-cardgiftg.4everland.app/redirect.html?id=${cardId}`;
        
        // üì± –ü–†–ï–í–¨–Æ –î–õ–Ø –ú–ï–°–°–ï–ù–î–ñ–ï–†–û–í
        let previewUrl = cardViewUrl;
        if (previewImage && previewImage.length < 8000) { // –õ–∏–º–∏—Ç URL
            previewUrl = `${baseUrl}/preview.html?id=${cardId}&img=${encodeURIComponent(previewImage)}`;
        }
        
        // üìä –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–¢–ò–ö–ò
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', {
            cardId,
            userId: cardData.userId,
            style: cardData.style,
            hasImage: !!cardData.mediaUrl,
            hasVideo: !!cardData.videoUrl,
            timestamp: new Date().toISOString()
        });
        
        // üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ú–ï–¢–ê–î–ê–ù–ù–´–• (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try {
            // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª
            // await saveCardMetadata(cardId, cardData);
        } catch (saveError) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', saveError);
        }
        
        // üéØ –û–¢–í–ï–¢ –ö–õ–ò–ï–ù–¢–£
        return res.status(200).json({
            success: true,
            imageUrl: previewImage || `${baseUrl}/default-preview.jpg`,
            shareUrl: previewUrl,
            cardViewUrl: cardViewUrl,
            cardId: cardId,
            metadata: {
                title: extractTitle(cardData),
                description: extractDescription(cardData),
                createdAt: new Date().toISOString()
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ API:', error);
        return res.status(500).json({ 
            error: 'Internal server error',
            message: process.env.NODE_ENV === 'development' ? error.message : 'Server error',
            cardId: req.body?.cardId || 'unknown'
        });
    }
}

// üé® –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
function extractTitle(cardData) {
    if (!cardData?.greeting) return '–ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞';
    
    const firstLine = cardData.greeting.split('\n')[0];
    return firstLine ? firstLine.substring(0, 60) : '–ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞';
}

function extractDescription(cardData) {
    if (!cardData?.greeting) return '–ö—Ä–∞—Å–∏–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞ –æ—Ç CardGift';
    
    const lines = cardData.greeting.split('\n').filter(line => line.trim());
    const description = lines.slice(0, 2).join(' ');
    return description ? description.substring(0, 160) : '–ö—Ä–∞—Å–∏–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞ –æ—Ç CardGift';
}

// üíæ –§–£–ù–ö–¶–ò–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
async function saveCardMetadata(cardId, cardData) {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ MongoDB, PostgreSQL –∏–ª–∏ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    const metadata = {
        cardId,
        userId: cardData.userId,
        greeting: cardData.greeting,
        style: cardData.style,
        createdAt: new Date().toISOString(),
        viewCount: 0
    };
    
    console.log('üíæ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é:', metadata);
    // await db.cards.insert(metadata);
}
