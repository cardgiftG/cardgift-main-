// CardGift API - WEB3 + –∫–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∏–ª—å—Ç—Ä—ã + –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class CardGiftAPI {
    constructor() {
        this.baseURL = window.location.origin;
        this.isWeb3Mode = true;
        this.fallbackToLocal = true;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        this.config = window.CONTRACT_CONFIG || null;
        
        // –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è
        this.cryptoConfig = {
            algorithm: 'AES-GCM',
            keyLength: 256,
            ivLength: 12,
            tagLength: 16,
            iterations: 100000,
            hashAlgorithm: 'SHA-256'
        };
        
        // Rate limiting
        this.rateLimits = new Map();
        this.maxRequestsPerMinute = 60;
        
        // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        this.cache = new Map();
        this.cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
        
        // ‚úÖ –ù–û–í–û–ï: –ö–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∏–ª—å—Ç—Ä—ã
        this.bannedWords = [
            // –†—É—Å—Å–∫–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            '–ø–æ—Ä–Ω–æ', '—Å–µ–∫—Å', '—ç—Ä–æ—Ç–∏–∫–∞', 'xxx', '—Å—É–∫–∞', '–±–ª—è–¥—å', '–ø–∏–∑–¥–∞', '—Ö—É–π', '–µ–±–∞—Ç—å', '–≥–æ–º–æ—Å–µ–∫', 
            '–ø–µ–¥–∏–∫', '–ø–∏–¥–æ—Ä', '–¥–æ–ª–±–æ–µ–±', '–º—É–¥–∞–∫', '—Å–≤–æ–ª–æ—á—å', '—Ç–≤–∞—Ä—å', '—Å—É—á–∫–∞', '—à–ª—é—Ö–∞', '–¥—Ä–æ—á–∏—Ç—å',
            '–Ω–∞—Å–∏–ª–∏–µ', '—É–±–∏—Ç—å', '—É–±–∏–π—Å—Ç–≤–æ', '—Å–º–µ—Ä—Ç—å', '—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ', '—Ç–µ—Ä—Ä–æ—Ä–∏–∑–º', '–≤–∑—Ä—ã–≤', '–±–æ–º–±–∞',
            '–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏', '–∫–æ–∫–∞–∏–Ω', '–≥–µ—Ä–æ–∏–Ω', '–º–∞—Ä–∏—Ö—É–∞–Ω–∞', '–∞–º—Ñ–µ—Ç–∞–º–∏–Ω', '—ç–∫—Å—Ç–∞–∑–∏', '–º–µ—Ñ–µ–¥—Ä–æ–Ω',
            // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞  
            'porn', 'sex', 'nude', 'naked', 'fuck', 'shit', 'bitch', 'whore', 'slut', 'gay', 'homo',
            'nigger', 'faggot', 'retard', 'kill', 'murder', 'suicide', 'bomb', 'terror', 'rape',
            'drugs', 'cocaine', 'heroin', 'marijuana', 'cannabis', 'meth', 'ecstasy'
        ];
        
        // ‚úÖ –ù–û–í–û–ï: –õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–∑ config)
        this.userLimits = this.config ? this.config.STORAGE_LIMITS : {
            FREE: 5,
            ACTIVATED: 20,
            MINI_ADMIN: 50,
            SUPER_ADMIN: 100
        };
        
        this.init();
    }
    
    async init() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Web3
            if (typeof walletManager !== 'undefined') {
                await walletManager.initWeb3();
                console.log('‚úÖ WEB3 —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            } else {
                console.warn('‚ö†Ô∏è WEB3 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ');
                this.isWeb3Mode = false;
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            await this.initCrypto();
            
            // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à–∞
            this.cleanupCache();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API:', error);
            this.isWeb3Mode = false;
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    async initCrypto() {
        try {
            if (!window.crypto || !window.crypto.subtle) {
                throw new Error('Web Crypto API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            }
            
            this.sessionKey = await this.generateSessionKey();
            console.log('‚úÖ –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error);
            this.sessionKey = null;
        }
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞ —Å–µ—Å—Å–∏–∏
    async generateSessionKey() {
        try {
            return await window.crypto.subtle.generateKey(
                {
                    name: this.cryptoConfig.algorithm,
                    length: this.cryptoConfig.keyLength
                },
                false,
                ['encrypt', 'decrypt']
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞:', error);
            return null;
        }
    }
    
    // ‚úÖ –ù–û–í–û–ï: –ö–æ–Ω—Ç–µ–Ω—Ç-—Ñ–∏–ª—å—Ç—Ä
    checkContent(text) {
        if (!text || typeof text !== 'string') return { isValid: true, errors: [] };
        
        const errors = [];
        const lowerText = text.toLowerCase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        for (const word of this.bannedWords) {
            if (lowerText.includes(word.toLowerCase())) {
                errors.push(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: "${word}"`);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º (–º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤)
        if (/(.)\1{10,}/.test(text)) {
            errors.push('–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º (–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã)');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        if (text.length > 5000) {
            errors.push('–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 5000 —Å–∏–º–≤–æ–ª–æ–≤)');
        }
        
        return {
            isValid: errors.length === 0,
            errors: errors
        };
    }
    
    // ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async checkUserLimit(userId) {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è userId:', userId);
    
    // –°–ù–ê–ß–ê–õ–ê –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–®–ï–õ–ï–ö –ê–î–ú–ò–ù–ê
    let currentWallet = null;
    
    try {
        if (walletManager && walletManager.currentAccount) {
            currentWallet = walletManager.currentAccount.toLowerCase();
        } else if (window.ethereum && window.ethereum.selectedAddress) {
            currentWallet = window.ethereum.selectedAddress.toLowerCase();
        }
        
        console.log('üîç –¢–µ–∫—É—â–∏–π –∫–æ—à–µ–ª–µ–∫:', currentWallet);
        
        // –¢–í–û–ô –ì–õ–ê–í–ù–´–ô –ö–û–®–ï–õ–ï–ö - –ë–ï–ó–õ–ò–ú–ò–¢–ù–´–ô –î–û–°–¢–£–ü
        if (currentWallet === '0x7a58c0be72be218b41c608b7fe7c5bb630736c71') {
            console.log('üî• –ì–õ–ê–í–ù–´–ô –ê–î–ú–ò–ù –û–ë–ù–ê–†–£–ñ–ï–ù - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø!');
            return {
                canCreate: true,
                currentCount: 0,
                limit: 999999,
                userLevel: 'SUPER_ADMIN',
                remaining: 999999
            };
        }
        
        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å —Ç–æ–∂–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π
        if (currentWallet === '0x0099188030174e381e7a7ee36d2783ecc31b6728') {
            console.log('üî• –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô –û–°–ù–û–í–ê–¢–ï–õ–¨ - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø!');
            return {
                canCreate: true,
                currentCount: 0,
                limit: 999999,
                userLevel: 'SUPER_ADMIN',
                remaining: 999999
            };
        }
        
    } catch (walletError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', walletError);
    }
    
    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    try {
        // –î–∞–µ–º –±–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        return {
            canCreate: true,
            currentCount: 0,
            limit: 5,
            userLevel: 'FREE',
            remaining: 5
        };
        
    } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤:', error);
        
        // –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–†–û–í–ï–†–ö–ê –î–õ–Ø –¢–í–û–ï–ì–û –ö–û–®–ï–õ–¨–ö–ê
        if (currentWallet === '0x7a58c0be72be218b41c608b7fe7c5bb630736c71') {
            return {
                canCreate: true,
                currentCount: 0,
                limit: 999999,
                userLevel: 'SUPER_ADMIN',
                remaining: 999999
            };
        }
        
        return {
            canCreate: false,
            currentCount: 0,
            limit: 5,
            userLevel: 'FREE',
            remaining: 0
        };
    }
}
    
    // Rate limiting –ø—Ä–æ–≤–µ—Ä–∫–∞
    checkRateLimit(action) {
        const now = Date.now();
        const minute = Math.floor(now / 60000);
        const key = `${action}_${minute}`;
        
        const current = this.rateLimits.get(key) || 0;
        if (current >= this.maxRequestsPerMinute) {
            throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è ${action}`);
        }
        
        this.rateLimits.set(key, current + 1);
        
        // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        for (const [limitKey, _] of this.rateLimits) {
            const keyMinute = parseInt(limitKey.split('_').pop());
            if (keyMinute < minute - 2) {
                this.rateLimits.delete(limitKey);
            }
        }
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    async encryptData(data, password = null) {
        try {
            if (!this.sessionKey && !password) {
                return this.legacyEncrypt(data);
            }
            
            const textData = JSON.stringify(data);
            const encodedData = new TextEncoder().encode(textData);
            
            const salt = window.crypto.getRandomValues(new Uint8Array(16));
            const iv = window.crypto.getRandomValues(new Uint8Array(this.cryptoConfig.ivLength));
            
            let key = this.sessionKey;
            
            if (password) {
                const passwordKey = await this.deriveKeyFromPassword(password, salt);
                key = passwordKey;
            }
            
            const encrypted = await window.crypto.subtle.encrypt(
                {
                    name: this.cryptoConfig.algorithm,
                    iv: iv
                },
                key,
                encodedData
            );
            
            const result = new Uint8Array(salt.length + iv.length + encrypted.byteLength);
            result.set(salt, 0);
            result.set(iv, salt.length);
            result.set(new Uint8Array(encrypted), salt.length + iv.length);
            
            return this.arrayBufferToBase64(result);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', error);
            return this.legacyEncrypt(data);
        }
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    async decryptData(encryptedData, password = null) {
        try {
            if (!this.sessionKey && !password) {
                return this.legacyDecrypt(encryptedData);
            }
            
            const combined = this.base64ToArrayBuffer(encryptedData);
            
            const salt = combined.slice(0, 16);
            const iv = combined.slice(16, 16 + this.cryptoConfig.ivLength);
            const encrypted = combined.slice(16 + this.cryptoConfig.ivLength);
            
            let key = this.sessionKey;
            
            if (password) {
                const passwordKey = await this.deriveKeyFromPassword(password, salt);
                key = passwordKey;
            }
            
            const decrypted = await window.crypto.subtle.decrypt(
                {
                    name: this.cryptoConfig.algorithm,
                    iv: iv
                },
                key,
                encrypted
            );
            
            const textData = new TextDecoder().decode(decrypted);
            return JSON.parse(textData);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', error);
            return this.legacyDecrypt(encryptedData);
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑ –ø–∞—Ä–æ–ª—è
    async deriveKeyFromPassword(password, salt) {
        const passwordKey = await window.crypto.subtle.importKey(
            'raw',
            new TextEncoder().encode(password),
            'PBKDF2',
            false,
            ['deriveKey']
        );
        
        return await window.crypto.subtle.deriveKey(
            {
                name: 'PBKDF2',
                salt: salt,
                iterations: this.cryptoConfig.iterations,
                hash: this.cryptoConfig.hashAlgorithm
            },
            passwordKey,
            {
                name: this.cryptoConfig.algorithm,
                length: this.cryptoConfig.keyLength
            },
            false,
            ['encrypt', 'decrypt']
        );
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Ö–µ—à–∞
    async createSecureHash(data) {
        try {
            const textData = typeof data === 'string' ? data : JSON.stringify(data);
            const encodedData = new TextEncoder().encode(textData);
            
            const hashBuffer = await window.crypto.subtle.digest('SHA-256', encodedData);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            
            return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö–µ—à–∞:', error);
            return this.legacyHash(data);
        }
    }
    
    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    validateUserData(userData) {
        const required = ['name', 'messenger', 'contact'];
        const errors = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for (const field of required) {
            if (!userData[field] || userData[field].trim().length === 0) {
                errors.push(`–ü–æ–ª–µ ${field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ`);
            }
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        if (userData.name) {
            if (userData.name.length > 50) {
                errors.push('–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            const nameCheck = this.checkContent(userData.name);
            if (!nameCheck.isValid) {
                errors.push(...nameCheck.errors);
            }
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ —Ç–∏–ø—É –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
        if (userData.contact && userData.messenger) {
            const contactValid = this.validateContactByMessenger(
                userData.contact, 
                userData.messenger
            );
            if (!contactValid) {
                errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è ${userData.messenger}`);
            }
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ ID
        if (userData.referralId && !/^\d{7}$/.test(userData.referralId)) {
            errors.push('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 7 —Ü–∏—Ñ—Ä');
        }
        
        return {
            isValid: errors.length === 0,
            errors: errors
        };
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—É
    validateContactByMessenger(contact, messenger) {
        const patterns = {
            email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
            telegram: /^(@[a-zA-Z0-9_]{5,32}|\+\d{10,15})$/,
            whatsapp: /^\+\d{10,15}$/,
            viber: /^\+\d{10,15}$/,
            instagram: /^@[a-zA-Z0-9_.]{1,30}$/,
            facebook: /.{3,}/,
            tiktok: /^@?[a-zA-Z0-9_.]{1,24}$/,
            twitter: /^@?[a-zA-Z0-9_]{1,15}$/
        };
        
        const pattern = patterns[messenger];
        return pattern ? pattern.test(contact) : contact.length >= 3;
    }
    
    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø: –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    sanitizeData(data) {
        if (typeof data === 'string') {
            return data
                .trim()
                .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
                .replace(/<[^>]*>/g, '') // –£–¥–∞–ª—è–µ–º –≤—Å–µ HTML —Ç–µ–≥–∏
                .replace(/javascript:/gi, '') // –£–¥–∞–ª—è–µ–º javascript: —Å—Å—ã–ª–∫–∏
                .replace(/on\w+=/gi, '') // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                .substring(0, 1000); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
        }
        
        if (typeof data === 'object' && data !== null) {
            const sanitized = {};
            for (const [key, value] of Object.entries(data)) {
                sanitized[key] = this.sanitizeData(value);
            }
            return sanitized;
        }
        
        return data;
    }
    
    // –ì–ï–ù–ï–†–ê–¶–ò–Ø ID (–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∞—è)
    generateUserId() {
        try {
            const array = new Uint32Array(2);
            window.crypto.getRandomValues(array);
            
            const randomNum = (array[0] % 9000000) + 1000000; // 7 —Ü–∏—Ñ—Ä
            return randomNum.toString();
        } catch (error) {
            // Fallback
            return Math.floor(1000000 + Math.random() * 9000000).toString();
        }
    }
    
    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    async registerUser(userData) {
        try {
            this.checkRateLimit('register');
            
            // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const sanitizedData = this.sanitizeData(userData);
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            const validation = this.validateUserData(sanitizedData);
            if (!validation.isValid) {
                throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validation.errors.join(', ')}`);
            }
            
            const { name, messenger, contact, referralId, walletAddress } = sanitizedData;
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
            const userId = this.generateUserId();
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            const userObject = {
                userId: userId,
                name: name,
                messenger: messenger,
                contact: contact,
                referralId: referralId || '',
                walletAddress: walletAddress || '',
                registrationDate: new Date().toISOString(),
                level: 0,
                isActive: false,
                cardCount: 0,
                dataHash: await cardGiftAPI.createSecureHash(`${userId}${name}${contact}`)
            };
            
            // WEB3 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            if (this.isWeb3Mode && walletManager && walletManager.isWalletConnected()) {
                try {
                    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
                    const txResult = await walletManager.registerUser(referralId);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    userObject.txHash = txResult.transactionHash;
                    userObject.blockNumber = txResult.blockNumber;
                    
                    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ:', txResult);
                } catch (web3Error) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ:', web3Error);
                }
            }
            
            // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            await this.saveToLocalStorage('currentUser', userObject);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const allUsers = await this.getFromLocalStorage('registeredUsers') || [];
            allUsers.push(userObject);
            await this.saveToLocalStorage('registeredUsers', allUsers);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if (referralId) {
                await this.updateReferralStats(referralId, userId);
            }
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            this.logSecurityEvent('user_registered', {
                userId: userId,
                timestamp: new Date().toISOString(),
                userAgent: navigator.userAgent
            });
            
            return {
                success: true,
                userId: userId,
                message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!'
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            
            this.logSecurityEvent('registration_failed', {
                error: error.message,
                timestamp: new Date().toISOString()
            });
            
            return {
                success: false,
                error: error.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
            };
        }
    }
    
    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø: –°–û–ó–î–ê–ù–ò–ï –û–¢–ö–†–´–¢–ö–ò
    async createCard(formData) {
        try {
            this.checkRateLimit('createCard');
            
            const userId = formData.get('userId');
            if (!userId) {
                throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω');
            }
            
            // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –õ–ò–ú–ò–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
            const limitCheck = await this.checkUserLimit(userId);
            if (!limitCheck.canCreate) {
                throw new Error(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–∫—Ä—ã—Ç–æ–∫ (${limitCheck.currentCount}/${limitCheck.limit}) –¥–ª—è —É—Ä–æ–≤–Ω—è ${limitCheck.userLevel}`);
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –æ—Ç–∫—Ä—ã—Ç–∫–∏
            const cardId = 'card_' + Date.now() + '_' + this.generateUserId();
            
            // –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            const greeting = this.sanitizeData(formData.get('greeting') || '');
            const personalMessage = this.sanitizeData(formData.get('personalMessage') || '');
            
            // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–ù–¢–ï–ù–¢ –ù–ê –ù–ï–î–û–ü–£–°–¢–ò–ú–û–ï –°–û–î–ï–†–ñ–ê–ù–ò–ï
            const greetingCheck = this.checkContent(greeting);
            if (!greetingCheck.isValid) {
                throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–∏: ${greetingCheck.errors.join(', ')}`);
            }
            
            const messageCheck = this.checkContent(personalMessage);
            if (!messageCheck.isValid) {
                throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: ${messageCheck.errors.join(', ')}`);
            }
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            const cardMetadata = {
                cardId: cardId,
                userId: userId,
                greeting: greeting,
                personalMessage: personalMessage,
                videoUrl: this.sanitizeData(formData.get('videoUrl') || ''),
                style: formData.get('style') || 'classic',
                textPosition: formData.get('textPosition') || 'bottom',
                qrEnabled: formData.get('qrEnabled') === 'true',
                qrUrl: this.sanitizeData(formData.get('qrUrl') || ''),
                qrPosition: formData.get('qrPosition') || 'bottomRight',
                qrSize: parseInt(formData.get('qrSize')) || 100,
                ctaEnabled: formData.get('ctaEnabled') === 'true',
                ctaTitle: this.sanitizeData(formData.get('ctaTitle') || ''),
                ctaButton: this.sanitizeData(formData.get('ctaButton') || ''),
                ctaUrl: this.sanitizeData(formData.get('ctaUrl') || ''),
                ctaPosition: formData.get('ctaPosition') || 'bottom',
                bannerEnabled: formData.get('bannerEnabled') === 'true',
                bannerHtml: this.sanitizeData(formData.get('bannerHtml') || ''),
                bannerUrl: this.sanitizeData(formData.get('bannerUrl') || ''),
                timers: formData.get('timers') || '{"message":0,"button":3,"banner":5}',
                createdAt: new Date().toISOString(),
                viewCount: 0,
                isArchived: false
            };
            
            // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            cardMetadata.contentHash = await cardGiftAPI.createSecureHash(cardMetadata);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª
            const mediaFile = formData.get('media');
            if (mediaFile && mediaFile.size > 0) {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                if (mediaFile.size > 10 * 1024 * 1024) { // 10MB
                    throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10MB)');
                }
                
                const allowedTypes = ['image/', 'video/'];
                if (!allowedTypes.some(type => mediaFile.type.startsWith(type))) {
                    throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞');
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ base64 –¥–ª—è –¥–µ–º–æ
                const mediaBase64 = await this.fileToBase64(mediaFile);
                cardMetadata.mediaType = mediaFile.type.startsWith('video/') ? 'video' : 'image';
                cardMetadata.mediaUrl = mediaBase64;
            }
            
            // WEB3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            if (this.isWeb3Mode && walletManager && walletManager.isWalletConnected()) {
                try {
                    // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–ª–æ–∫—á–µ–π–Ω–∞
                    const metadataString = JSON.stringify(cardMetadata);
                    const metadataHash = await cardGiftAPI.createSecureHash(metadataString);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
                    const txResult = await walletManager.createCard(metadataHash);
                    cardMetadata.txHash = txResult.transactionHash;
                    cardMetadata.blockNumber = txResult.blockNumber;
                    
                    console.log('‚úÖ –û—Ç–∫—Ä—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ:', txResult);
                } catch (web3Error) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ:', web3Error);
                }
            }
            
            // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            await this.saveCardLocally(cardMetadata);
            
            // ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –°–ß–ï–¢–ß–ò–ö –û–¢–ö–†–´–¢–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
            await this.updateUserCardCount(userId, 1);
            
            this.logSecurityEvent('card_created', {
                cardId: cardId,
                userId: userId,
                timestamp: new Date().toISOString()
            });
            
            return {
                success: true,
                cardId: cardId,
                viewUrl: `/card-viewer.html?id=${cardId}`,
                message: '–û—Ç–∫—Ä—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:', error);
            return {
                success: false,
                error: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏'
            };
        }
    }
    
    // ‚úÖ –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateUserCardCount(userId, increment) {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentUser = await this.getFromLocalStorage('currentUser');
            if (currentUser && currentUser.userId === userId) {
                currentUser.cardCount = (currentUser.cardCount || 0) + increment;
                await this.saveToLocalStorage('currentUser', currentUser);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
            const allUsers = await this.getFromLocalStorage('registeredUsers') || [];
            const userIndex = allUsers.findIndex(u => u.userId === userId);
            if (userIndex !== -1) {
                allUsers[userIndex].cardCount = (allUsers[userIndex].cardCount || 0) + increment;
                await this.saveToLocalStorage('registeredUsers', allUsers);
            }
            
            // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.cache.delete(`user_${userId}`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–æ–∫:', error);
        }
    }
    
    // ‚úÖ –ù–û–í–û–ï: –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏
    async deleteCard(cardId, userId) {
        try {
            this.checkRateLimit('deleteCard');
            
            if (!cardId || !userId) {
                throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω ID –æ—Ç–∫—Ä—ã—Ç–∫–∏ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∫—É
            const card = await this.getCard(cardId);
            if (!card) {
                throw new Error('–û—Ç–∫—Ä—ã—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if (card.userId !== userId) {
                throw new Error('–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –æ—Ç–∫—Ä—ã—Ç–∫–∏');
            }
            
            // WEB3 —É–¥–∞–ª–µ–Ω–∏–µ (–ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—É—é)
            if (this.isWeb3Mode && walletManager && walletManager.isWalletConnected()) {
                try {
                    await walletManager.deleteCard(cardId);
                    console.log('‚úÖ –û—Ç–∫—Ä—ã—Ç–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–∞—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ');
                } catch (web3Error) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ:', web3Error);
                }
            }
            
            // –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            await this.removeCardLocally(cardId, userId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            await this.updateUserCardCount(userId, -1);
            
            this.logSecurityEvent('card_deleted', {
                cardId: cardId,
                userId: userId,
                timestamp: new Date().toISOString()
            });
            
            return {
                success: true,
                message: '–û—Ç–∫—Ä—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞'
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:', error);
            return {
                success: false,
                error: error.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏'
            };
        }
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ
    async removeCardLocally(cardId, userId) {
        try {
            // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let userCards = await this.getFromLocalStorage('userCards') || {};
            if (userCards[userId]) {
                userCards[userId] = userCards[userId].filter(card => card.cardId !== cardId);
                await this.saveToLocalStorage('userCards', userCards);
            }
            
            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—É—é –≤ –æ–±—â–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            let allCards = await this.getFromLocalStorage('allCards') || [];
            const cardIndex = allCards.findIndex(card => card.cardId === cardId);
            if (cardIndex !== -1) {
                allCards[cardIndex].isArchived = true;
                allCards[cardIndex].deletedAt = new Date().toISOString();
                await this.saveToLocalStorage('allCards', allCards);
            }
            
            // –û—á–∏—â–∞–µ–º –∫–µ—à
            this.cache.delete(`card_${cardId}`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:', error);
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   async getUserCards(userId) {
       try {
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
           const cacheKey = `user_cards_${userId}`;
           const cached = this.getCacheItem(cacheKey);
           if (cached) {
               return cached;
           }
           
           let userCards = [];
           
           // WEB3 –¥–∞–Ω–Ω—ã–µ
           if (this.isWeb3Mode && walletManager && walletManager.isWalletConnected()) {
               try {
                   const web3Cards = await walletManager.getUserCards(userId);
                   
                   // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–π –æ—Ç–∫—Ä—ã—Ç–∫–µ
                   for (const cardId of web3Cards) {
                       try {
                           const card = await this.getCard(cardId);
                           if (card && !card.isArchived) {
                               userCards.push(card);
                           }
                       } catch (error) {
                           console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É ${cardId}:`, error);
                       }
                   }
               } catch (web3Error) {
                   console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∫—Ä—ã—Ç–æ–∫ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞:', web3Error);
               }
           }
           
           // –î–æ–ø–æ–ª–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
           const localUserCards = await this.getFromLocalStorage('userCards') || {};
           const localCards = localUserCards[userId] || [];
           
           // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
           localCards.forEach(localCard => {
               if (!userCards.find(card => card.cardId === localCard.cardId) && !localCard.isArchived) {
                   userCards.push(localCard);
               }
           });
           
           // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
           userCards.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
           
           // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
           this.setCacheItem(cacheKey, userCards, 2 * 60 * 1000); // 2 –º–∏–Ω—É—Ç—ã –∫–µ—à
           
           return userCards;
           
       } catch (error) {
           console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
           return [];
       }
   }
   
   // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏ –ø–æ ID (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
   async getCard(cardId) {
       try {
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
           const cacheKey = `card_${cardId}`;
           const cached = this.getCacheItem(cacheKey);
           if (cached) {
               return cached;
           }
           
           // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
           const localCards = await this.getFromLocalStorage('userCards') || {};
           
           // –ò—â–µ–º –≤–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
           for (const userId in localCards) {
               const userCards = localCards[userId] || [];
               const card = userCards.find(c => c.cardId === cardId);
               if (card) {
                   this.setCacheItem(cacheKey, card);
                   return card;
               }
           }
           
           // –ò—â–µ–º –≤ –æ–±—â–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
           const allCards = await this.getFromLocalStorage('allCards') || [];
           const card = allCards.find(c => c.cardId === cardId);
           
           if (card) {
               this.setCacheItem(cacheKey, card);
               return card;
           }
           
           throw new Error('–û—Ç–∫—Ä—ã—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
           
       } catch (error) {
           console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:', error);
           throw error;
       }
   }
   
   // –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
   async activateUser(userId, activationData = {}) {
       try {
           this.checkRateLimit('activate');
           
           if (!this.isWeb3Mode || !walletManager || !walletManager.isWalletConnected()) {
               throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
           }
           
           const { level, walletAddress, txHash } = activationData;
           
           // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
           const currentUser = await this.getFromLocalStorage('currentUser');
           if (currentUser && currentUser.userId === userId) {
               currentUser.level = level || 1;
               currentUser.isActive = true;
               currentUser.walletAddress = walletAddress;
               currentUser.activationTxHash = txHash;
               currentUser.activationDate = new Date().toISOString();
               
               await this.saveToLocalStorage('currentUser', currentUser);
           }
           
           // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
           const allUsers = await this.getFromLocalStorage('registeredUsers') || [];
           const userIndex = allUsers.findIndex(u => u.userId === userId);
           if (userIndex !== -1) {
               allUsers[userIndex] = { ...allUsers[userIndex], ...currentUser };
               await this.saveToLocalStorage('registeredUsers', allUsers);
           }
           
           this.logSecurityEvent('user_activated', {
               userId: userId,
               level: level,
               timestamp: new Date().toISOString()
           });
           
           return {
               success: true,
               message: '–ê–∫—Ç–∏–≤–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!'
           };
           
       } catch (error) {
           console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
           throw error;
       }
   }
   
   // –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
   async getUser(userId) {
       try {
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
           const cacheKey = `user_${userId}`;
           const cached = this.getCacheItem(cacheKey);
           if (cached) {
               return cached;
           }
           
           // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º WEB3
           if (this.isWeb3Mode && walletManager && walletManager.isWalletConnected()) {
               try {
                   const web3User = await walletManager.getUser(userId);
                   
                   // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                   const localUser = await this.getFromLocalStorage('currentUser');
                   if (localUser && localUser.userId === userId) {
                       const combined = { ...localUser, ...web3User };
                       this.setCacheItem(cacheKey, combined);
                       return combined;
                   }
                   
                   this.setCacheItem(cacheKey, web3User);
                   return web3User;
               } catch (web3Error) {
                   console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
               }
           }
           
           // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
           const currentUser = await this.getFromLocalStorage('currentUser');
           if (currentUser && currentUser.userId === userId) {
               this.setCacheItem(cacheKey, currentUser);
               return currentUser;
           }
           
           // –ò—â–µ–º –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
           const allUsers = await this.getFromLocalStorage('registeredUsers') || [];
           const user = allUsers.find(u => u.userId === userId);
           
           if (user) {
               this.setCacheItem(cacheKey, user);
               return user;
           }
           
           throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
           
       } catch (error) {
           console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
           throw error;
       }
   }
   
   // –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–§–ï–†–ê–õ–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
   async getUserReferrals(userId) {
       try {
           this.checkRateLimit('getReferrals');
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
           const cacheKey = `referrals_${userId}`;
           const cached = this.getCacheItem(cacheKey);
           if (cached) {
               return cached;
           }
           
           let referrals = [];
           
           // WEB3 –¥–∞–Ω–Ω—ã–µ
           if (this.isWeb3Mode && walletManager && walletManager.isWalletConnected()) {
               try {
                   const web3Referrals = await walletManager.getUserReferrals(userId);
                   
                   // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ—Ñ–µ—Ä–∞–ª—É
                   for (const refId of web3Referrals) {
                       try {
                           const refUser = await this.getUser(refId);
                           referrals.push(refUser);
                       } catch (error) {
                           console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ${refId}:`, error);
                       }
                   }
               } catch (web3Error) {
                   console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞:', web3Error);
               }
           }
           
           // –î–æ–ø–æ–ª–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
           const allUsers = await this.getFromLocalStorage('registeredUsers') || [];
           const localReferrals = allUsers.filter(user => user.referralId === userId);
           
           // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
           const allReferrals = [...referrals];
           localReferrals.forEach(localRef => {
               if (!allReferrals.find(ref => ref.userId === localRef.userId)) {
                   allReferrals.push(localRef);
               }
           });
           
           // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
           const now = new Date();
           const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);
           const activeThisMonth = allReferrals.filter(ref => 
               new Date(ref.registrationDate) >= thisMonth
           ).length;
           
           const result = {
               total: allReferrals.length,
               activeThisMonth: activeThisMonth,
               directReferrals: allReferrals,
               earnings: 0 // TODO: –ü–æ–¥—Å—á–µ—Ç –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
           };
           
           // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
           this.setCacheItem(cacheKey, result, 2 * 60 * 1000); // 2 –º–∏–Ω—É—Ç—ã –∫–µ—à
           
           return result;
           
       } catch (error) {
           console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
           return {
               total: 0,
               activeThisMonth: 0,
               directReferrals: [],
               earnings: 0
           };
       }
   }
   
   // –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
   async getUserContacts(userId) {
       try {
           this.checkRateLimit('getContacts');
           
           const user = await this.getUser(userId);
           
           if (!user || user.level < 2) {
               throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
           }
           
           // WEB3 –¥–∞–Ω–Ω—ã–µ
           if (this.isWeb3Mode && walletManager && walletManager.isWalletConnected()) {
               try {
                   const encryptedData = await walletManager.getUserEncryptedData(userId);
                   if (encryptedData) {
                       const decryptedData = await this.decryptData(encryptedData);
                       if (decryptedData) {
                           return this.formatContactsData(decryptedData);
                       }
                   }
               } catch (web3Error) {
                   console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞:', web3Error);
               }
           }
           
           // –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
           const allUsers = await this.getFromLocalStorage('registeredUsers') || [];
           const userReferrals = allUsers.filter(u => u.referralId === userId);
           
           return this.formatContactsData(userReferrals);
           
       } catch (error) {
           console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
           throw error;
       }
   }
   
   // –û–ë–ù–û–í–õ–ï–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò
   async updateReferralStats(referrerId, newUserId) {
       try {
           let stats = await this.getFromLocalStorage('referralStats') || {};
           
           if (!stats[referrerId]) {
               stats[referrerId] = {
                   total: 0,
                   thisMonth: 0,
                   referrals: []
               };
           }
           
           stats[referrerId].total++;
           stats[referrerId].referrals.push({
               userId: newUserId,
               date: new Date().toISOString()
           });
           
           // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
           const thisMonth = new Date();
           thisMonth.setDate(1);
           thisMonth.setHours(0, 0, 0, 0);
           
           stats[referrerId].thisMonth = stats[referrerId].referrals.filter(ref => 
               new Date(ref.date) >= thisMonth
           ).length;
           
           await this.saveToLocalStorage('referralStats', stats);
           
           // –û—á–∏—â–∞–µ–º –∫–µ—à —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
           this.cache.delete(`referrals_${referrerId}`);
           
       } catch (error) {
           console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
       }
   }
   
   // –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–ö–†–´–¢–ö–ò –õ–û–ö–ê–õ–¨–ù–û
   async saveCardLocally(cardData) {
       try {
           const userId = cardData.userId;
           
           // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
           let userCards = await this.getFromLocalStorage('userCards') || {};
           if (!userCards[userId]) {
               userCards[userId] = [];
           }
           userCards[userId].push(cardData);
           await this.saveToLocalStorage('userCards', userCards);
           
           // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
           let allCards = await this.getFromLocalStorage('allCards') || [];
           allCards.push(cardData);
           await this.saveToLocalStorage('allCards', allCards);
           
           // –û—á–∏—â–∞–µ–º –∫–µ—à
           this.cache.delete(`card_${cardData.cardId}`);
           this.cache.delete(`user_cards_${userId}`);
           
       } catch (error) {
           console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:', error);
       }
   }
   
   // –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• –ö–û–ù–¢–ê–ö–¢–û–í
   formatContactsData(contacts) {
       const formatted = {};
       
       if (Array.isArray(contacts)) {
           contacts.forEach(contact => {
               const messenger = contact.messenger || 'unknown';
               if (!formatted[messenger]) {
                   formatted[messenger] = [];
               }
               formatted[messenger].push({
                   userId: contact.userId || '',
                   name: contact.name || '',
                   contact: contact.contact || '',
                   registrationDate: contact.registrationDate || new Date().toISOString(),
                   level: contact.level || 0,
                   referralId: contact.referralId || '',
                   dataHash: contact.dataHash || ''
               });
           });
       }
       
       return formatted;
   }
   
   // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   logSecurityEvent(event, data) {
       try {
           const logs = JSON.parse(localStorage.getItem('securityLogs') || '[]');
           logs.push({
               event: event,
               data: data,
               timestamp: new Date().toISOString()
           });
           
           // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
           if (logs.length > 100) {
               logs.splice(0, logs.length - 100);
           }
           
           localStorage.setItem('securityLogs', JSON.stringify(logs));
       } catch (error) {
           console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error);
       }
   }
   
   // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
   cleanupCache() {
       const now = Date.now();
       for (const [key, data] of this.cache) {
           if (now - data.timestamp > data.ttl) {
               this.cache.delete(key);
           }
       }
   }
   
   // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å TTL
   setCacheItem(key, value, ttl = this.cacheTimeout) {
       this.cache.set(key, {
           value: value,
           timestamp: Date.now(),
           ttl: ttl
       });
   }
   
   getCacheItem(key) {
       const item = this.cache.get(key);
       if (!item) return null;
       
       const now = Date.now();
       if (now - item.timestamp > item.ttl) {
           this.cache.delete(key);
           return null;
       }
       
       return item.value;
   }
   
   // –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   async backupUserData(userId) {
       try {
           const user = await this.getUser(userId);
           const referrals = await this.getUserReferrals(userId);
           const userCards = await this.getUserCards(userId);
           
           const backup = {
               version: '1.0.0',
               timestamp: new Date().toISOString(),
               user: user,
               referrals: referrals,
               cards: userCards,
               checksum: await cardGiftAPI.createSecureHash({ user, referrals, userCards })
           };
           
           return backup;
       } catch (error) {
           console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
           throw error;
       }
   }
   
   // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   async restoreUserData(backupData, userId) {
       try {
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
           const expectedChecksum = await cardGiftAPI.createSecureHash({
               user: backupData.user,
               referrals: backupData.referrals,
               userCards: backupData.cards
           });
           
           if (expectedChecksum !== backupData.checksum) {
               throw new Error('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞');
           }
           
           // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
           await this.saveToLocalStorage('currentUser', backupData.user);
           
           // –û—á–∏—â–∞–µ–º –∫–µ—à
           this.cache.clear();
           
           this.logSecurityEvent('data_restored', {
               userId: userId,
               timestamp: new Date().toISOString()
           });
           
           return { success: true, message: '–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' };
           
       } catch (error) {
           console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
           throw error;
       }
   }
   
   // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   async clearUserData(userId) {
       try {
           // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–µ—à–∞
           for (const [key, _] of this.cache) {
               if (key.includes(userId)) {
                   this.cache.delete(key);
               }
           }
           
           // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
           const currentUser = await this.getFromLocalStorage('currentUser');
           if (currentUser && currentUser.userId === userId) {
               localStorage.removeItem('currentUser');
           }
           
           // –£–¥–∞–ª—è–µ–º –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
           const allUsers = await this.getFromLocalStorage('registeredUsers') || [];
           const filteredUsers = allUsers.filter(u => u.userId !== userId);
           await this.saveToLocalStorage('registeredUsers', filteredUsers);
           
           // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
           const userCards = await this.getFromLocalStorage('userCards') || {};
           delete userCards[userId];
           await this.saveToLocalStorage('userCards', userCards);
           
           this.logSecurityEvent('user_data_cleared', {
               userId: userId,
               timestamp: new Date().toISOString()
           });
           
           return { success: true, message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã' };
           
       } catch (error) {
           console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
           throw error;
       }
   }
   
   // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
   
   // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –≤ base64
   fileToBase64(file) {
       return new Promise((resolve, reject) => {
           const reader = new FileReader();
           reader.readAsDataURL(file);
           reader.onload = () => resolve(reader.result);
           reader.onerror = error => reject(error);
       });
   }
   
   // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
   async saveToLocalStorage(key, data) {
       return new Promise((resolve, reject) => {
           try {
               // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
               const dataString = JSON.stringify(data);
               if (dataString.length > 5 * 1024 * 1024) { // 5MB
                   throw new Error('–î–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –¥–ª—è localStorage');
               }
               
               localStorage.setItem(key, dataString);
               resolve();
           } catch (error) {
               console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
               reject(error);
           }
       });
   }
   
   // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ localStorage
   async getFromLocalStorage(key) {
       return new Promise((resolve) => {
           try {
               const data = localStorage.getItem(key);
               resolve(data ? JSON.parse(data) : null);
           } catch (error) {
               console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ localStorage:', error);
               resolve(null);
           }
       });
   }
   
   // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è base64
   arrayBufferToBase64(buffer) {
       let binary = '';
       const bytes = new Uint8Array(buffer);
       const len = bytes.byteLength;
       for (let i = 0; i < len; i++) {
           binary += String.fromCharCode(bytes[i]);
       }
       return window.btoa(binary);
   }
   
   base64ToArrayBuffer(base64) {
       const binary_string = window.atob(base64);
       const len = binary_string.length;
       const bytes = new Uint8Array(len);
       for (let i = 0; i < len; i++) {
           bytes[i] = binary_string.charCodeAt(i);
       }
       return bytes.buffer;
   }
   
   // FALLBACK: –ü—Ä–æ—Å—Ç–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   legacyEncrypt(data) {
       try {
           return btoa(JSON.stringify(data));
       } catch (error) {
           console.error('–û—à–∏–±–∫–∞ legacy —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', error);
           return '';
       }
   }
   
   legacyDecrypt(encryptedData) {
       try {
           return JSON.parse(atob(encryptedData));
       } catch (error) {
           console.error('–û—à–∏–±–∫–∞ legacy —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', error);
           return null;
       }
   }
   
   // FALLBACK: –ü—Ä–æ—Å—Ç–æ–π —Ö–µ—à (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   legacyHash(data) {
       const str = typeof data === 'string' ? data : JSON.stringify(data);
       let hash = 0;
       for (let i = 0; i < str.length; i++) {
           const char = str.charCodeAt(i);
           hash = ((hash << 5) - hash) + char;
           hash = hash & hash; // Convert to 32bit integer
       }
       return hash.toString(16);
   }
   
   // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ)
   showNotification(message, type = 'info', duration = 3000) {
       // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
       const notification = document.createElement('div');
       notification.className = `notification ${type}`;
       notification.textContent = message;
       
       notification.style.cssText = `
           position: fixed;
           bottom: 20px;
           left: 50%;
           transform: translateX(-50%) translateY(100%);
           background: rgba(0, 0, 0, 0.95);
           color: white;
           padding: 16px 28px;
           border-radius: 12px;
           z-index: 9999;
           opacity: 0;
           transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
           border: 1px solid #333;
           max-width: 90%;
           text-align: center;
           font-weight: 500;
           box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
           backdrop-filter: blur(8px);
       `;
       
       // –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –ø–æ —Ç–∏–ø—É
       if (type === 'success') {
           notification.style.borderColor = '#4CAF50';
           notification.style.background = 'rgba(76, 175, 80, 0.15)';
           notification.style.color = '#4CAF50';
       } else if (type === 'error') {
           notification.style.borderColor = '#f44336';
           notification.style.background = 'rgba(244, 67, 54, 0.15)';
           notification.style.color = '#f44336';
       } else if (type === 'warning') {
           notification.style.borderColor = '#FF9800';
           notification.style.background = 'rgba(255, 152, 0, 0.15)';
           notification.style.color = '#FF9800';
       } else {
           notification.style.borderColor = '#2196F3';
           notification.style.background = 'rgba(33, 150, 243, 0.15)';
           notification.style.color = '#2196F3';
       }
       
       document.body.appendChild(notification);
       
       // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
       setTimeout(() => {
           notification.style.transform = 'translateX(-50%) translateY(0)';
           notification.style.opacity = '1';
       }, 100);
       
       // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
       setTimeout(() => {
           notification.style.transform = 'translateX(-50%) translateY(100%)';
           notification.style.opacity = '0';
           setTimeout(() => {
               if (notification.parentNode) {
                   notification.parentNode.removeChild(notification);
               }
           }, 400);
       }, duration);
       
       // –ö–ª–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
       notification.addEventListener('click', () => {
           notification.style.transform = 'translateX(-50%) translateY(100%)';
           notification.style.opacity = '0';
           setTimeout(() => {
               if (notification.parentNode) {
                   notification.parentNode.removeChild(notification);
               }
           }, 400);
       });
   }
   
   // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   getSecurityStats() {
       try {
           const logs = JSON.parse(localStorage.getItem('securityLogs') || '[]');
           const stats = {
               totalEvents: logs.length,
               registrations: logs.filter(l => l.event === 'user_registered').length,
               activations: logs.filter(l => l.event === 'user_activated').length,
               cardsCreated: logs.filter(l => l.event === 'card_created').length,
               failedRegistrations: logs.filter(l => l.event === 'registration_failed').length,
               lastActivity: logs.length > 0 ? logs[logs.length - 1].timestamp : null
           };
           
           return stats;
       } catch (error) {
           console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error);
           return null;
       }
   }
   
   // –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   exportSecurityLogs() {
       try {
           const logs = JSON.parse(localStorage.getItem('securityLogs') || '[]');
           const exportData = {
               version: '1.0.0',
               exportedAt: new Date().toISOString(),
               logs: logs
           };
           
           const blob = new Blob([JSON.stringify(exportData, null, 2)], {
               type: 'application/json'
           });
           
           const url = URL.createObjectURL(blob);
           const link = document.createElement('a');
           link.href = url;
           link.download = `cardgift_security_logs_${new Date().toISOString().split('T')[0]}.json`;
           link.click();
           
           URL.revokeObjectURL(url);
           
           this.showNotification('‚úÖ –õ–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
           
       } catch (error) {
           console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤:', error);
           this.showNotification('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤', 'error');
       }
   }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
window.cardGiftAPI = new CardGiftAPI();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª–µ–π
if (typeof module !== 'undefined' && module.exports) {
   module.exports = CardGiftAPI;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
   if (window.cardGiftAPI) {
       window.cardGiftAPI.cleanupCache();
   }
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
setInterval(() => {
   if (window.cardGiftAPI) {
       window.cardGiftAPI.cleanupCache();
   }
}, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
